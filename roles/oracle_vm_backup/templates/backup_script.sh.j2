#!/bin/bash
export PATH="/home/{{ USER }}/bin:/usr/bin"

PROFILE_NAME="{{ OCI_PROFILE }}"
CONFIG_FILE="{{ CONFIG_FILE }}"
BACKUP_NAME="{{ item }}-backup"
COMPARTMENT_ID="{{ OCI_TENANCY_ID }}"
TMP_BACKUP_NAME=$(date +%Y-%m-%d_%H-%M-%S)
DISCORD_WEBHOOK_URL="{{ DISCORD_WEBHOOK }}"

# Initialize log message and status
LOG=""
STATUS="success"  # Default to success
COLOR_SUCCESS="3066993"  # Green
COLOR_FAILURE="15158332" # Red

# Function to append messages to the log
log_message() {
    LOG="${LOG}$1\n"
}

# Function to send the final embed to Discord
send_to_discord() {
    local color=$1
    # Escape special characters for JSON
    local description=$(echo "$LOG" | jq -Rs '.')

    curl -H "Content-Type: application/json" -X POST -d "{
        \"embeds\": [{
            \"title\": \"Backup Job - ${BACKUP_NAME}\",
            \"description\": $description,
            \"color\": $color,
            \"timestamp\": \"$(date -Iseconds)\"
        }]
    }" ${DISCORD_WEBHOOK_URL}
}

# Check for jq
if ! which jq >/dev/null 2>&1; then
    STATUS="failure"
    log_message "‚ùå Please install jq with 'sudo apt install jq -y'. Backup script cannot proceed."
    send_to_discord $COLOR_FAILURE
    exit 1
fi

log_message "‚úÖ jq is installed. Proceeding with the backup process."

# Get previous backup
log_message "üîç Fetching the previous backup..."
OUTPUT=$(oci bv boot-volume-backup list --compartment-id ${COMPARTMENT_ID} --display-name ${BACKUP_NAME} --lifecycle-state AVAILABLE --query "data [0].{bootVolumeId:\"boot-volume-id\",id:id}" --raw-output --profile ${PROFILE_NAME} --config-file ${CONFIG_FILE})
LAST_BACKUP_ID=$(echo "$OUTPUT" | /usr/bin/jq -r '.id')
BOOT_VOLUME_ID=$(echo "$OUTPUT" | /usr/bin/jq -r '.bootVolumeId')

if [ -z "$LAST_BACKUP_ID" ] || [ -z "$BOOT_VOLUME_ID" ]; then
    log_message "‚ö†Ô∏è No previous backup found or failed to retrieve boot volume ID."
else
    log_message "‚ÑπÔ∏è Last backup ID: $LAST_BACKUP_ID\nBoot volume ID: $BOOT_VOLUME_ID"
fi

# Create new backup
log_message "üõ†Ô∏è Creating a new backup..."
NEW_BACKUP_ID=$(oci bv boot-volume-backup create --boot-volume-id ${BOOT_VOLUME_ID} --type FULL --display-name ${TMP_BACKUP_NAME} --wait-for-state AVAILABLE --wait-interval-seconds "180" --query "data.id" --raw-output --profile ${PROFILE_NAME} --config-file ${CONFIG_FILE})

if [ -z "$NEW_BACKUP_ID" ]; then
    STATUS="failure"
    log_message "‚ùå Failed to create a new backup. Exiting."
    send_to_discord $COLOR_FAILURE
    exit 1
else
    log_message "‚úÖ New backup created successfully! Backup ID: $NEW_BACKUP_ID"
fi

# Delete old backup
if [ -n "$LAST_BACKUP_ID" ]; then
    log_message "üóëÔ∏è Deleting the old backup..."
    oci bv boot-volume-backup delete --force --boot-volume-backup-id ${LAST_BACKUP_ID} --wait-for-state TERMINATED --profile ${PROFILE_NAME} --config-file ${CONFIG_FILE}

    if [ $? -eq 0 ]; then
        log_message "‚úÖ Old backup (ID: $LAST_BACKUP_ID) deleted successfully."
    else
        log_message "‚ö†Ô∏è Failed to delete old backup (ID: $LAST_BACKUP_ID)."
    fi
else
    log_message "‚ö†Ô∏è No old backup found to delete."
fi

# Rename temporary backup
log_message "üîÑ Renaming the temporary backup..."
oci bv boot-volume-backup update --boot-volume-backup-id ${NEW_BACKUP_ID} --display-name ${BACKUP_NAME} --profile ${PROFILE_NAME} --config-file ${CONFIG_FILE}

if [ $? -eq 0 ]; then
    log_message "‚úÖ Temporary backup renamed to ${BACKUP_NAME}."
else
    log_message "‚ö†Ô∏è Failed to rename the temporary backup."
fi

# Final log message
if [ "$STATUS" = "success" ]; then
    log_message "\n‚úÖ **Backup process completed successfully!** Goodbye!"
    send_to_discord $COLOR_SUCCESS
else
    log_message "\n‚ùå **Backup process encountered errors!** Please check the log."
    send_to_discord $COLOR_FAILURE
fi
